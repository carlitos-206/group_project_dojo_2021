Group Leader: Carlos Caceres
Members(alphabetical): Jaime Lizarazu, Conner Marx, Gustavo O'Neil

This is the group project outline and assaignments.
This is only barebone and should not be taken literal.



1. login/reg - carlos
2. dashboard - carlos
3. create_group - gustuvo 
4. edit_group - connor
5. all_my_groups - gustavo
6. group_chat - connor
7. other_groups - jaime
8. this_other_user_groups - jaimie 
9. logout - carlos

Reactive pages - carlos + anyone who wants to learn
file upload - carlos + anyone who who wants to learn 

deployment - group effort 


# I would like to have everyone done by Monday or Tuesday at latest, that gives me time to do the css for all the HTML and make them Reactive
# Please note the URL are only suggestion and that sometimes the URL pattern might change based on jinja for loop so keep that in mind, do not force the same url unless you can make it work, 
# sometimes varius URL patterns can lead to the same views.py function so don't get hung up on that specific URl pattern 
# Also this is only a barebone outline that gets all the min requirements youre more than welcome to add more features just verify with the whole group


1./index
    Here will be the login and register portion

    Register validation:
        1. First Name: (fname must be 2 char min)
        
        2. Last Name: (lname must be least 2 char min)
        
        3. email: (email must be unique, there can't be duplicates in DB )
        
        4. username: (username must be unique too db)
        
        5. Birthdate: (user mubet be least 18yrs to Register)

        6. Gender (all applicable genders)
        
        8. Password: (Must be least 8 char long + sum_nums + special char) (use JS to show password)
        
        9. Password confirmation: (passwords must match) (use JS to show password)
        
        10. terms and agreements: (this will an href link that takes to new HTML that provide terms and agreements)
        
        11. Register btn: (If requirements are met then route to /profile_pic_upload )


    Login:
        1. email: (email must exist in DB)
        
        2. Password: (Password must match email)
        
        3. login btn: (if condition are met route to /dashboard )

2./dashboard
    hint:
        views.py
        def dashboard(request)
            if 'user_id' in request.session:

            else:
                redirect(/)

    Nav Bar (these are href links that route to other pages):
        1. create a group (this will route /create_group)
        
        2. view other groups (this will route /all_other_groups) 
            (If you have joined a group it will not be diplayed here or if it's your group)
        
        3. sign out (this will route /logout)
    
    view my groups: (this will route /my_groups)

    profile_pic: (if clicked it can be edited or removed)

    groups table:
        row 1:
            1. group name (this will route /group_chat/{{group.id}}) 
            2. group host (this will route /{{user.username}}/groups ) (this will be unique per host)
            3. group member count
            4. rules (ex: NSFW, etc)
            5. day and time
            8. Drop group (Drop group I've joined, on_delete=CASCADE)

        row 2 + :
            here will display all of the groups I am part of including my own, organiezed by day of week and time of engagement

3. /create_group
    hint:
        views.py
        def create(request)
            if 'user_id' in request.session:

            else:
                redirect(/)
    return home btn: (this will route /dashboard)

    create form:
        1. group name
        2. group genre(this should be a select field with the option to add more genres and have them reflect in the next selection hint:https://stackoverflow.com/questions/5650457/html-select-form-with-option-to-enter-custom-value/23902304)
        3. rules (this will a product backlog but two options are 18+ or 21+)
        4. time and date (is there a time the group meets to chat? ex: Every Wednesday at 7pm)
        5. group desc ( this will be a optional text box with a min of 5 char )
        6. create btn (this will route /dashboard)
    
    add space (this will be a backlog feature since each add will be cater to users age and possibly gender)

4. /edit_group/{{group.id}}
    unique identifier will be group_id matching user_id in session 
    Only the group owner can edit group, if somehow other user tries to bypass redirect them to the dashbooard
    hint:
        views.py
        def edit(request, group_id)
            if 'user_id' in request.session:
                this_owner=request.session['user_id']
                if {tableName}.objects.filter(id=group_id, owner=this_owner)
                    # ensures the person editing is not only in sessions but also owner

            else:
                redirect(/)


    edit form:
        1. group name
        2. group genre(this should be a select field with the option to add more genres and have them reflect in the next selection hint:https://stackoverflow.com/questions/5650457/html-select-form-with-option-to-enter-custom-value/23902304)
        3. rules (this will a product backlog but two options are 18+ or 21+)
        4. time and date (is there a time the group meets to chat? ex: Every Wednesday at 7pm)
        5. group desc ( this will be a optional text box with a min of 5 char )
        6. create btn (this will route /dashboard)

5. /all_my_groups/{{user.id}}
    def myGroups(request, user_id)
            if 'user_id' in request.session:

            else:
                redirect(/)

    groups table:
        row 1:
            1. group name (this will route /group_info) 
            2. group member count
            3. rules (ex: NSFW, etc)
            4. edit | Delete

        row 2 + :
            Here will display all of the groups organiezed by day of week, and time of engagement

6. /group_chat/{{group.id}}
    
    def groupChat(request, group_id)
            if 'user_id' in request.session:
                this_member=request.session['user_id']
                if {tableName}.objects.filter(id=group_id, member=this_membe): 
                        #this not only forces the user to have to be in sessions 
                        #they also have to be member to be able to interact
                        #indentation is key for this one

            else:
                redirect(/)
    
    here will be a groups chat, with feed
    if possible add a DM post like allow users to input a @username to chat with other user(not important but would be cool)
    
        1. Group description
        2. group host
        3. group image (this could be url drop in or a file upload)
        4. add post:
            post validation:
                post must be least 1 char long

        5. post info:
            1. who posted {{user.username}}
            2. content
            3. created at
            4. updated at

7. /other_groups
    hint: 
        def otherGroups(request)
            if 'user_id' in request.session:

            else:
                redirect(/)

    groups table:
        row 1:
            1. group name (this will route /group_info) 
            2. group host (this will route /{{user.username}}/groups ) (this will be unique per host)
            3. group member count
            4. rules (ex: NSFW, etc)
            8. Drop group (Drop group I've joined, on_delete=CASCADE)

        row 2 + :
            here will display all of the groups I am part of including my own, organiezed by day of week and time of engagement            
    
8. /{{tableName.owner.id}}/groups 
      def other_groups(request, tableName_owner_id)
            if 'user_id' in request.session:
                 this_user={tableName}.objects.filter(id=tableName_owner_id)

            else:
                redirect(/)
    This is a page to have the user in session be able to only query their group, 

    groups table:
        row 1:
            1. group name (this will route /group_info) 
            2. group member count
            3. rules (ex: NSFW, etc)
            4. edit | Delete

        row 2 + :
            Here will display all of the groups organiezed by day of week, and time of engagement

9. /logout
    #once logged out it will lead to this page and have it give a image or something but timeout to google.com